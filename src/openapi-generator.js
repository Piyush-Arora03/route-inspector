/**
 * Takes a route path from a framework like Express (`/users/:id`) and converts
 * it to an OpenAPI-compatible path (`/users/{id}`).
 * @param {string} path - The framework-specific route path.
 * @returns {string} An OpenAPI-compatible path.
 */
function normalizePath(path) {
  return path.replace(/:(\w+)/g, '{$1}');
}

/**
 * Extracts parameter names from an OpenAPI path string.
 * e.g., /users/{id}/posts/{postId} -> [{name: 'id', in: 'path'}, {name: 'postId', in: 'path'}]
 * @param {string} path - The OpenAPI-compatible path.
 * @returns {Array} An array of parameter objects.
 */
function extractParameters(path) {
  const params = [];
  const regex = /\{(\w+)\}/g;
  let match;
  while ((match = regex.exec(path)) !== null) {
    params.push({
      name: match[1],
      in: 'path',
      required: true, // Path parameters are always required
      schema: {
        type: 'string', // Defaulting to string, as we can't infer the type
      },
      description: `Parameter for ${match[1]}`,
    });
  }
  return params;
}

/**
 * Generates a complete OpenAPI 3.0 specification object from discovered routes.
 * @param {Array} routes - The array of discovered route objects.
 * @returns {object} A valid OpenAPI specification object.
 */
function generateOpenApiSpec(routes) {
  const spec = {
    openapi: '3.0.0',
    info: {
      title: 'API Documentation',
      version: '1.0.0',
      description: 'Automatically generated by Route Inspector',
    },
    paths: {},
  };

  routes.forEach(route => {
    const path = normalizePath(route.path);
    const method = route.method.toLowerCase();

    if (method === 'use' || method === 'all') {
      return;
    }

    if (!spec.paths[path]) {
      spec.paths[path] = {};
    }

    // Create the base operation object for this method
    const operation = {
      summary: `Handles ${method.toUpperCase()} requests for ${route.path}`,
      description: `Defined in: ${route.file}`,
      responses: {
        '200': {
          description: 'Successful response',
        },
      },
    };

    // **THE FIX IS HERE:**
    // Extract parameters from the path and add them to the operation object
    const parameters = extractParameters(path);
    if (parameters.length > 0) {
      operation.parameters = parameters;
    }

    spec.paths[path][method] = operation;
  });

  return spec;
}

module.exports = {
  generateOpenApiSpec,
};